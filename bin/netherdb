<?php

require('vendor/autoload.php');

new class
extends Nether\Console\Client {

	public function
	__Construct() {
		parent::__Construct();
		$this->Run();
		return;
	}

	#[Nether\Console\Meta\Subcommand('sql-create')]
	#[Nether\Console\Meta\Info('Generate the SQL to CREATE this table from the Table Class Annotations. If no database is specified it will only print the SQL to console.')]
	#[Nether\Console\Meta\SubcommandArg('fqcn', TRUE, 'The full namespace and class path as your application knows the class.')]
	#[Nether\Console\Meta\SubcommandOption('--db', TRUE, 'Alias of the DB config to connect and execute this query on.')]
	#[Nether\Console\Meta\Error(1, 'no class specified')]
	#[Nether\Console\Meta\Error(2, 'class not found')]
	#[Nether\Console\Meta\Error(3, 'query failed')]
	#[Nether\Console\Meta\Error(4, 'database connect failed')]
	public function
	HandleSqlCreate() {
	/*//
	@date 2021-08-19
	read the class attributes and generate the sql required to create this
	table in the database server.
	//*/

		$Class = $this->GetInput(2);
		$DBConfig = $this->GetOption('conf') ?? 'netherdb.json';
		$DBAlias = $this->GetOption('db') ?? NULL;
		$SQL = NULL;

		////////

		if(!$Class)
		$this->EndOfLine(1);

		$Class = static::TranslateClassName($Class);

		if(!class_exists($Class))
		$this->EndOfLine(2);

		////////

		try {
			if($DBConfig && $DBAlias) {
				static::Messages("Connecting to {$DBAlias}...", '');
				Nether\Database\ConnectionConfig::LoadFromJSON($DBConfig);

				$SQL = (
					Nether\Database::Get($DBAlias)
					->NewVerseCreate($Class)
					->SetPretty(TRUE)
				);
			}

			else {
				$SQL = (
					Nether\Database\Verse::FromMetaCreate($Class)
					->SetPretty(TRUE)
				);
			}
		}

		catch(Throwable $Err) {
			static::Messages(
				$Err->GetMessage()
			);

			$this->EndOfLine(4);
		}

		static::Messages('-- SQL BEGIN', '');
		echo $SQL;
		static::Messages('', '', '-- SQL END', '');

		////////

		if(!$SQL->HasDatabase())
		return 0;

		if($this->PromptEquals("Execute on {$DBAlias}?", '(y/n):', 'y')) {
			$Result = $SQL->Query();

			if(!$Result->IsOK()) {
				static::Message("> {$Result->GetError()}");
				$this->EndOfLine(3);
			}

			static::Message("> OK");
		}

		return;
	}

	static public function
	TranslateClassName(string $Input):
	string {
	/*//
	@date 2021-08-19
	i want to support a few different syntaxes for inputting class names
	since php went with backslashes as namespaceoperators. i said it then,
	and im saying it now. choosing backslashes to avoid extra work rather
	than make it actually be good was fukken stupid.
	//*/

		// Some.Class.Name

		if(str_contains($Input,'.'))
		return str_replace('.','\\',$Input);

		// Some-Class-Name

		if(str_contains($Input,'-'))
		return str_replace('-','\\',$Input);

		return $Input;
	}

};
