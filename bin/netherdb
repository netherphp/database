<?php

use Nether\Database;
use Nether\Database\Verse;

require('vendor/autoload.php');

new class
extends Nether\Console\Client {

	public function
	__Construct() {
		parent::__Construct();
		$this->Run();
		return;
	}

	#[Nether\Console\Meta\Subcommand('sql-create')]
	#[Nether\Console\Meta\Info('Generate the SQL to CREATE this table from the Table Class Annotations. If no database is specified it will only print the SQL to console.')]
	#[Nether\Console\Meta\SubcommandArg('fqcn', TRUE, 'The full namespace and class path as your application knows the class.')]
	#[Nether\Console\Meta\SubcommandOption('--db', TRUE, 'Alias of the DB config to connect and execute this query on.')]
	#[Nether\Console\Meta\SubcommandOption('--drop', FALSE, 'Prepend a DROP TABLE to the query.')]
	#[Nether\Console\Meta\SubcommandOption('-y', FALSE, 'Auto confirm prompts.')]
	#[Nether\Console\Meta\Error(1, 'no class specified')]
	#[Nether\Console\Meta\Error(2, 'class not found')]
	#[Nether\Console\Meta\Error(3, 'query failed')]
	#[Nether\Console\Meta\Error(4, 'database connect failed')]
	#[Nether\Console\Meta\Error(5, 'execution cancelled')]
	public function
	HandleSqlCreate() {
	/*//
	@date 2021-08-19
	read the class attributes and generate the sql required to create this
	table in the database server.
	//*/

		$Class = $this->GetInput(2);
		$DBConfig = $this->GetOption('conf') ?? NULL;
		$DBAlias = $this->GetOption('db') ?? NULL;
		$AutoYes = $this->GetOption('y') ?? FALSE;
		$AutoDropTable = $this->GetOption('drop') ?? FALSE;
		$SQL = NULL;
		$PreSQL = NULL;

		////////

		if($DBConfig && !$DBAlias)
		$DBAlias = 'Default';

		if(!$Class)
		$this->EndOfLine(1);

		$Class = static::TranslateClassName($Class);

		if(!class_exists($Class))
		$this->EndOfLine(2);

		////////

		try {
			$SQL = $this->NewVerseCreate(
				$DBConfig,
				$DBAlias,
				$Class
			);
		}

		catch(Throwable $Err) {
			static::Messages($Err->GetMessage());
			$this->EndOfLine(4);
		}

		if($AutoDropTable) {
			if($SQL->HasDatabase())
			$PreSQL = $SQL->GetDatabase()->NewVerseDropTable($Class);

			else
			$PreSQL = Nether\Database\Verse::FromMetaDropTable($Class);
		}

		$this->PrintVerse([
			$PreSQL,
			$SQL
		]);

		if(!$SQL->HasDatabase())
		return 0;

		$Result = $this->ConfirmAndExecuteVerse(
			[ $PreSQL, $SQL ],
			$AutoYes
		);

		if($Result === FALSE)
		$this->EndOfLine(3);

		return 0;
	}

	protected function
	NewVerseCreate(?string $DBConfig, ?string $DBAlias, string $Class):
	Verse {

		if(!$DBConfig || !$DBAlias)
		return (
			Nether\Database\Verse::FromMetaCreate($Class)
			->SetPretty(TRUE)
		);

		static::Messages("Connecting to {$DBAlias}...", '');
		Nether\Database\ConnectionConfig::LoadFromJSON($DBConfig);

		return (
			Nether\Database::Get($DBAlias)
			->NewVerseCreate($Class)
			->SetPretty(TRUE)
		);
	}

	protected function
	PrintVerse(Verse|array $Queries):
	void {
	/*//
	@date 2022-02-20
	//*/

		$Query = NULL;

		////////

		if($Queries instanceof Verse)
		$Queries = [ $Queries ];

		////////

		static::Messages('-- SQL BEGIN', '');

		foreach($Queries as $Query) {
			if(!$Query)
			continue;

			echo $Query->GetSQL(), ";", PHP_EOL, PHP_EOL;
		}

		static::Messages('-- SQL END');

		return;
	}

	protected function
	ConfirmAndExecuteVerse(Verse|array $Queries, bool $Force=FALSE):
	?bool {
	/*//
	@date 2022-02-20
	//*/

		$Confirm = TRUE;
		$Database = NULL;

		////////

		if($Queries instanceof Verse)
		$Queries = [ $Queries ];

		if(!count($Queries))
		return FALSE;

		foreach($Queries as $SQL)
		if($SQL instanceof Verse)
		if($SQL->HasDatabase())
		$Database = $SQL->GetDatabase();

		if(!$Database)
		return FALSE;

		////////

		if(!$Force) {
			static::Message('');
			$Confirm = $this->PromptEquals(
				"Execute on {$Database->GetAlias()}?",
				'(y/n):',
				'y'
			);
		}

		if(!$Confirm)
		return NULL;

		////////

		foreach($Queries as $SQL) {
			if(!$SQL)
			continue;

			$Result = $SQL->Query();

			if(!$Result->IsOK()) {
				static::Message("> {$Result->GetError()}");
				return FALSE;
			}
		}

		static::Message(sprintf(
			'> OK (%d %s)',
			Nether\Database::$QueryCount,
			(Nether\Database::$QueryCount === 1 ? 'query' : 'queries')
		));

		return TRUE;
	}

	static public function
	TranslateClassName(string $Input):
	string {
	/*//
	@date 2021-08-19
	i want to support a few different syntaxes for inputting class names
	since php went with backslashes as namespaceoperators. i said it then,
	and im saying it now. choosing backslashes to avoid extra work rather
	than make it actually be good was fukken stupid.
	//*/

		// Some.Class.Name

		if(str_contains($Input,'.'))
		return str_replace('.','\\',$Input);

		// Some-Class-Name

		if(str_contains($Input,'-'))
		return str_replace('-','\\',$Input);

		return $Input;
	}

};
