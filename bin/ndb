<?php

use Nether\Common;
use Nether\Console;
use Nether\Database;

require('vendor/autoload.php');

#[Console\Meta\Value('--db', 'Alias of the DB config to connect and execute this query on.')]
#[Console\Meta\Toggle('--without-atlantis', 'Do not load Atlantis for configuration.')]
#[Console\Meta\Error(100, 'No connection for "%s"')]
class App
extends Console\Client {

	const
	AppName    = 'NetherDB',
	AppDesc    = 'Database Util CLI.',
	AppVersion = '5.0.0-dev',
	AppDebug   = TRUE;

	protected Database\Manager
	$DBM;

	protected Database\Connection
	$DBC;

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('dump')]
	#[Console\Meta\Info('Backup the specified database to an SQL file via its dumping utilities (ex: mysqldump).')]
	#[Console\Meta\Error(1, 'no database name specified')]
	#[Console\Meta\Error(2, 'no connection found %s')]
	#[Console\Meta\Error(3, 'unable to create backup directory (%s)')]
	public function
	HandleBackupViaDump():
	int {

		$Name = Common\Filters\Text::TrimmedNullable($this->GetOption('db') ?? 'Default');
		$Commit = Common\Filters\Numbers::BoolType($this->GetOption('commit'));

		$Now = new Common\Date;
		$Cmd = new Common\Datastore;

		$DB = NULL;
		$Timer = NULL;
		$Outfile = NULL;
		$Err = NULL;
		$Result = NULL;

		////////

		try { $DB = $this->FetchDatabaseConnection($Name); }
		catch(Common\Error\RequiredDataMissing $Err) { $this->Quit(1); }
		catch(Database\Error\ConnectionNotFound $Err) { $this->Quit(2, $Name); }

		////////

		$Outfile = Common\Filesystem\Util::Pathify(
			dirname(__FILE__, 5), 'backups', 'db',
			sprintf(
				'%s.%s.%s.sql',
				$DB->Name,
				$Now->Get('Ymd'),
				$Now->Get('His')
			)
		);

		if(!Common\Filesystem\Util::MkDir(dirname($Outfile)))
		$this->Quit(3);

		////////

		$Cmd
		->Push('mysqldump')
		->Push("-u{$DB->Username}")
		->Push("-p{$DB->Password}")
		->Push($DB->Database)
		->Remap(fn(string $Arg)=> escapeshellarg($Arg));

		$Cmd
		->Push('>')
		->Push(escapeshellarg($Outfile));

		////////

		$this->PrintLn(sprintf(
			'%s %s (%s)',
			$this->Format('Database:', static::FmtPrime),
			$DB->Name,
			$DB->Database
		));

		$this->PrintLn(sprintf(
			'%s %s',
			$this->Format('Outfile:', static::FmtPrime),
			$Outfile
		));

		$this->PrintLn(sprintf(
			'%s %s',
			$this->Format('Command:', static::FmtPrime),
			$Cmd->Join(' ')
		));

		////////

		if(!$Commit) {
			($this)
			->PrintLn()
			->FormatLn('Use --commit to serious.', static::FmtAccent)
			->PrintLn();

			return 0;
		}

		$this->PrintLn();
		$this->FormatLn('Running...', static::FmtAccent);
		$this->PrintLn();

		$Timer = new Common\Timer(function(...$Args) use($Cmd, &$Result) {
			$Result = $this->ExecuteCommandLine($Cmd->Join(' '), TRUE);
			return;
		});

		$Timer->Run();

		/** @var Console\Struct\CommandLineUtil $Result */

		$this->FormatLn(
			sprintf('Done (%.3f)', $Timer->Get()),
			($Result->Error !== 0 ? static::FmtError : static::FmtOK)
		);

		if($Result->Error !== 0) {
			$this->PrintLn();
			$Result->Print();
			$this->PrintLn();
		}

		return 0;
	}



	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Console\Meta\Command('sql-create')]
	#[Console\Meta\Info('Generate the SQL to CREATE this table from the Table Class Annotations. If no database is specified it will only print the SQL to console.')]
	#[Console\Meta\Arg('fqcn', 'The full namespace and class path as your application knows the class.')]
	#[Console\Meta\Toggle('--drop', 'Prepend a DROP TABLE to the query.')]
	#[Console\Meta\Toggle('-y', 'Auto confirm prompts.')]
	#[Console\Meta\Error(1, 'no class specified')]
	#[Console\Meta\Error(2, 'class not found')]
	#[Console\Meta\Error(3, 'query failed')]
	#[Console\Meta\Error(4, 'database connect failed')]
	#[Console\Meta\Error(5, 'execution cancelled')]
	public function
	HandleSqlCreate():
	int {
	/*//
	@date 2021-08-19
	read the class attributes and generate the sql required to create this
	table in the database server.
	//*/

		$Class = $this->GetInput(1);
		$AutoYes = $this->GetOption('y') ?? FALSE;
		$AutoDropTable = $this->GetOption('drop') ?? FALSE;

		$SQL = NULL;
		$PreSQL = NULL;
		$FKSQL1 = NULL;
		$FKSQL2 = NULL;

		// handle the basics of making sure we have a class to inspect.

		if(!$Class)
		$this->Quit(1);

		$Class = static::TranslateClassName($Class);

		if(!class_exists($Class))
		$this->Quit(2);

		// generate create table and pull its database connection for
		// reuse with various options.

		try {
			$SQL = $this->NewVerseCreate($Class);
		}

		catch(Throwable $Err) {
			$this->PrintLn($Err->GetMessage());
			$this->Quit(4);
		}

		// generate drop table.

		if($AutoDropTable) {
			$PreSQL = $this->NewVerseDropTable($Class);
			$FKSQL1 = $this->NewVerseFKCheck(0);
			$FKSQL2 = $this->NewVerseFKCheck(1);
		}

		// show the queries we intend to run.

		$this->PrintVerse([ $FKSQL1, $PreSQL, $SQL, $FKSQL2 ]);

		// execute the queries on the current database.

		$Result = $this->ConfirmAndExecuteVerse(
			[ $FKSQL1, $PreSQL, $SQL, $FKSQL2 ],
			$AutoYes
		);

		if($Result === FALSE)
		$this->Quit(3);

		return 0;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	protected function
	OnRun():
	void {
	/*//
	@date 2023-01-04
	//*/

		$DBAlias = $this->GetOption('db') ?? 'Default';
		$Nolantis = $this->GetOption('without-atlantis') ?? FALSE;

		////////

		if(!$Nolantis && class_exists('Nether\\Atlantis\\Engine'))
		new Nether\Atlantis\Engine(getcwd());

		////////

		$this->DBM = new Database\Manager;

		try {
			$this->DBC = $this->DBM->Get($DBAlias);
		}

		catch(Throwable $Err) {
			$this->Quit(100, $DBAlias);
		}

		return;
	}

	protected function
	NewVerseCreate(string $Class):
	Database\Verse {
	/*//
	@date 2023-01-03
	//*/

		$Verse = Database\Verse::FromMetaCreate($Class, $this->DBC);
		$Verse->SetPretty(TRUE);

		return $Verse;
	}

	protected function
	NewVerseDropTable(string $Class):
	Database\Verse {
	/*//
	@date 2023-01-03
	//*/

		$Verse = Database\Verse::FromMetaDropTable($Class, $this->DBC);
		$Verse->SetPretty(TRUE);

		return $Verse;
	}

	protected function
	NewVerseFKCheck(int $Val):
	Database\Verse {
	/*//
	@date 2023-01-04
	//*/

		$Verse = $this->DBC->NewVerse();
		$Verse->SetPretty(TRUE);
		$Verse->VarSet(['FOREIGN_KEY_CHECKS' => $Val]);

		return $Verse;
	}

	////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////

	#[Common\Meta\Date('2023-09-04')]
	protected function
	FetchDatabaseConnection(?string $Name):
	Database\Connection {

		// handle if they failed to ask a valid question.

		if(!$Name)
		throw new Common\Error\RequiredDataMissing('Name', 'string');

		// the manager throws its own exceptions if it needs.

		$CX = $this->DBM->Get($Name);
		$CX->Name ??= $Name;

		return $CX;
	}

	protected function
	PrintVerse(Database\Verse|array $Queries):
	void {
	/*//
	@date 2022-02-20
	//*/

		$Query = NULL;

		////////

		if($Queries instanceof Database\Verse)
		$Queries = [ $Queries ];

		////////

		$this->PrintLn('-- SQL BEGIN');

		foreach($Queries as $Query) {
			if(!$Query)
			continue;

			echo $Query->GetSQL(), ";", PHP_EOL, PHP_EOL;
		}

		$this->PrintLn('-- SQL END');

		return;
	}

	protected function
	ConfirmAndExecuteVerse(Database\Verse|array $Queries, bool $Force=FALSE):
	?bool {
	/*//
	@date 2022-02-20
	//*/

		$Confirm = TRUE;
		$Database = NULL;

		////////

		if($Queries instanceof Database\Verse)
		$Queries = [ $Queries ];

		if(!count($Queries))
		return FALSE;

		foreach($Queries as $SQL) {
			if($SQL instanceof Database\Verse)
			if($SQL->HasDatabase())
			$Database = $SQL->GetDatabase();
		}

		if(!$Database)
		return FALSE;

		////////

		if(!$Force) {
			$this->PrintLn('');
			$Confirm = $this->PromptEquals(
				"Execute on {$Database->Name}({$Database->Database})?",
				'(y/n):', 'y'
			);
		}

		if(!$Confirm)
		return NULL;

		////////

		foreach($Queries as $SQL) {
			if(!$SQL)
			continue;

			$Result = $SQL->Query();

			if(!$Result->IsOK()) {
				$this->PrintLn("> {$Result->GetError()}");
				return FALSE;
			}
		}

		$this->PrintLn(sprintf(
			'> OK (%d %s)',
			$Database->GetQueryCount(),
			($Database->GetQueryCount() === 1 ? 'query' : 'queries')
		));

		return TRUE;
	}

	static public function
	TranslateClassName(string $Input):
	string {
	/*//
	@date 2021-08-19
	i want to support a few different syntaxes for inputting class names
	since php went with backslashes as namespaceoperators. i said it then,
	and im saying it now. choosing backslashes to avoid extra work rather
	than make it actually be good was fukken stupid.
	//*/

		// Some.Class.Name

		if(str_contains($Input,'.'))
		return str_replace('.','\\',$Input);

		// Some-Class-Name

		if(str_contains($Input,'-'))
		return str_replace('-','\\',$Input);

		return $Input;
	}

};

(new App)->Run();
